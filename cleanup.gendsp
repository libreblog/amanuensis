{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 8,
			"minor" : 0,
			"revision" : 3,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 39.0, 122.0, 596.0, 420.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 10.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 2,
		"gridsize" : [ 10.0, 10.0 ],
		"gridsnaponopen" : 2,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "To the Sun",
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-18",
					"linecount" : 3,
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 701.0, 410.0, 20.0, 42.0 ],
					"text" : "out 15"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-17",
					"linecount" : 2,
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 701.0, 430.0, 25.0, 31.0 ],
					"text" : "out 14"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-16",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 647.5384521484375, 430.0, 36.0, 20.0 ],
					"text" : "out 13"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-15",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 671.0, 410.0, 36.0, 20.0 ],
					"text" : "out 12"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 637.81817626953125, 410.0, 36.0, 20.0 ],
					"text" : "out 11"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-14",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 439.333343505859375, 410.0, 31.0, 20.0 ],
					"text" : "out 7"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-13",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 573.77777099609375, 410.0, 31.0, 20.0 ],
					"text" : "out 9"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-12",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 601.0, 410.0, 36.0, 20.0 ],
					"text" : "out 10"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-11",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 546.5555419921875, 410.0, 31.0, 20.0 ],
					"text" : "out 8"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-10",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 392.111114501953125, 410.0, 31.0, 20.0 ],
					"text" : "out 6"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-9",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 274.888885498046875, 410.0, 31.0, 20.0 ],
					"text" : "out 5"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-8",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 237.666671752929688, 410.0, 31.0, 20.0 ],
					"text" : "out 4"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-6",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 160.444442749023438, 410.0, 31.0, 20.0 ],
					"text" : "out 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 83.222221374511719, 410.0, 31.0, 20.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 25.0, 20.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 305.0, 14.0, 25.0, 20.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "get_song_start(oldest_index, track) {               //These inputs could be consolidated/generalized\r\n    Buffer memory(\"memory\");\r\n    Buffer recording_spans(\"recording_spans\");\r\n    Buffer unlocked_start(\"unlocked_start\");\r\n    song_start = peek(memory, oldest_index, 5);\r\n    span_recording = peek(recording_spans, 0, track);\r\n    if(!span_recording) {\r\n        if(!song_start) {\r\n            song_start = peek(unlocked_start, 0);\r\n        }\r\n    }\r\n    else {\r\n        song_start = peek(recording_spans, 1, track);\r\n    }\r\n    return song_start;\r\n}\r\ncleanup(index) {\r\n    Buffer memory(\"memory\");\r\n    Buffer past_beats(\"past_beats\");\r\n    //Perform the cleanup\r\n    timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st\r\n    for(j = 0; j < channels(memory); j += 1) {\r\n        poke(memory, 0, index, j);\r\n    }\r\n    poke(past_beats, index, 0);\r\n    return timestamp;\r\n}\r\nBuffer stats(\"stats\");\r\nBuffer memory(\"memory\");\r\nBuffer past_beats(\"past_beats\");\r\nBuffer starting_frame(\"starting_frame\");\r\nBuffer prior_recitation(\"prior_recitation\");\r\n//Buffer prior_playing(\"prior_playing\");    //For now only playing need compete. When actual crucible implemented here, will A_tracks need to be referenced or can establish spans be re-scored in real-time?\r\nBuffer recording_spans(\"recording_spans\");\r\nBuffer palette_by_track(\"palette_by_track\");\r\nBuffer prior_cue_by_palette(\"prior_cue_by_palette\");\r\nParam tolerance(9);\r\nParam wake(8000);\r\nParam span(0);\r\nParam exporting(0);\r\nParam comping(0);\r\nParam loop_end(1);\r\nout2 = -1;\r\nout7 = -1;\r\nrecord = -1;\r\noldest_index = peek(past_beats, 0) - 1;\r\nif(oldest_index >= 0) {\r\n    now = peek(stats, 0);\r\n    last_involved_at = peek(memory, oldest_index, 1);\r\n    if(now - last_involved_at > wake + tolerance || exporting) { //If no longer viable (ready for cleanup) OR expediting due to imminent export\r\n        frame = peek(memory, oldest_index, 0);\r\n        source = peek(memory, oldest_index, 2);\r\n        track = abs(source);\r\n        if(source < 0) {    //If playing, not recitation\r\n            score = peek(memory, oldest_index, 3);\r\n            older_x = peek(prior_recitation, 0, track);\r\n            older_y = peek(prior_recitation, 1, track);\r\n            if(!older_x) {\r\n                record = score > 0;\r\n            }\r\n            else {\r\n                next_index = oldest_index - 1;\r\n                while(now - peek(memory, next_index, 1) > wake + tolerance || exporting) {\r\n                    if(source == -peek(memory, next_index, 2)) {    //If next_index is recitation on the same track\r\n                        newer_x = peek(memory, next_index, 0);\r\n                        slope = (newer_x - older_x) / (peek(memory, next_index, 3) - older_y);\r\n                        competition = (peek(memory, oldest_index, 0) * slope) + older_y;\r\n                        record = score > competition;\r\n                        break;\r\n                    }\r\n                    next_index -= 1;\r\n                    if(next_index < 0) {    //No newer competitor\r\n                        record = score > 0;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(record != -1) {  //If enough info was found for cleanup to occur on the oldest_index\r\n                click = peek(stats, 6); //Song can end and click clear before memory clean and all cues placed, but with click obsolete this will be irrelevant\r\n                palette = peek(palette_by_track, track);\r\n                span_recording = peek(recording_spans, 0, track);\r\n                if(record) {\r\n                    if(!span_recording) {\r\n                        song_start = get_song_start(oldest_index, track);   //Must happen before span starts being documented\r\n                        out15 = span + 1;                        //increment/update\r\n                        poke(recording_spans, out15, 0, track);  //Span ID\r\n                        poke(recording_spans, song_start, 1, track); //Starting frame of song (stored with span so cues can reference it later)\r\n                        poke(recording_spans, frame, 2, track); //Start of span (still in absolute frames)\r\n                    }\r\n                    poke(recording_spans, frame, 3, track);     //Current end of span (still in absolute frames)\r\n                }\r\n                else {  //Have span end if(!record || loop_end surpassed)\r\n                    if(span_recording) {\r\n                        stats.poke(1, 10);\t//lock\r\n                        song_start = peek(recording_spans, 1, track);\r\n                        out2 = peek(recording_spans, 0, track);\r\n                        out3 = (peek(recording_spans, 2, track) - song_start) / click;\r\n                        out5 = (peek(recording_spans, 3, track) - song_start) / click;\r\n                        out4 = out5 - out3;\r\n                        out6 = track;\r\n                        poke(recording_spans, 0, 0, track);\r\n                        poke(recording_spans, 0, 1, track);\r\n                        poke(recording_spans, 0, 2, track);\r\n                        poke(recording_spans, 0, 3, track);\r\n                    }\r\n                }\r\n                //Place cue\r\n                peak_frame = peek(prior_cue_by_palette, 4, palette);\r\n                if(peak_frame) {    //prevents those 1st non-beat cues/unnecessary clutter\r\n                    song_start = peek(prior_cue_by_palette, 2, palette);\r\n                    start_frame = peek(prior_cue_by_palette, 0, palette);\r\n                    out7 = (start_frame - song_start) / click;  //Ramp position (start of attack). Everything stored in absolute frames\r\n                    out8 = peek(prior_cue_by_palette, 1, palette);  //Span ID\r\n                    out9 = song_start;  //Pass (Starting_frame)\r\n                    out10 = peek(prior_cue_by_palette, 3, palette);  //Palette position (not in frames, keeps its own ms count)\r\n                    out11 = peak_frame - start_frame; //Attack\r\n                    out12 = frame - peak_frame;                                 //Release\r\n                    out13 = track;                                         //Track\r\n                    out14 = out7 + (out11 / click);                             //Peak ramp position (should be obsolete when filtering/recitation are done in gen)\r\n                }\r\n                //Update info for next cue\r\n                song_start = get_song_start(oldest_index, track);\r\n                palette_start = peek(memory, oldest_index, 6) - out12;  //Pallets_start = palette_position - attack (release of prior)\r\n                crop = song_start - peak_frame;\r\n                if(crop > 0) {\r\n                    poke(prior_cue_by_palette, song_start, 0, palette);\r\n                    poke(prior_cue_by_palette, palette_start + crop, 3, palette);\r\n                }\r\n                else {\r\n                    poke(prior_cue_by_palette, peak_frame, 0, palette);\r\n                    poke(prior_cue_by_palette, palette_start, 3, palette);\r\n                }\r\n                poke(prior_cue_by_palette, peek(recording_spans, 0, track), 1, palette);    //Span (spans must update 1st)\r\n                poke(prior_cue_by_palette, song_start, 2, palette); //(Pass)\r\n                poke(prior_cue_by_palette, frame, 4, palette);\r\n                out1 = cleanup(oldest_index);\r\n            }\r\n        }\r\n        else if(source > 0) {  //Process recitation\r\n            poke(prior_recitation, frame, 0, track);\r\n            poke(prior_recitation, peek(memory, oldest_index, 3), 1, track);\r\n            out1 = cleanup(oldest_index);\r\n        }\r\n    }\r\n}",
					"fontface" : 0,
					"fontname" : "Lucida Console",
					"fontsize" : 10.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 1,
					"numoutlets" : 15,
					"outlettype" : [ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ],
					"patching_rect" : [ 6.0, 39.0, 714.0, 361.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 6.0, 418.0, 31.0, 20.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-10", 0 ],
					"source" : [ "obj-3", 5 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-11", 0 ],
					"source" : [ "obj-3", 7 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-12", 0 ],
					"source" : [ "obj-3", 9 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-13", 0 ],
					"source" : [ "obj-3", 8 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-14", 0 ],
					"source" : [ "obj-3", 6 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-15", 0 ],
					"source" : [ "obj-3", 11 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-16", 0 ],
					"source" : [ "obj-3", 12 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-17", 0 ],
					"source" : [ "obj-3", 13 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-18", 0 ],
					"source" : [ "obj-3", 14 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-6", 0 ],
					"source" : [ "obj-3", 2 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-7", 0 ],
					"source" : [ "obj-3", 10 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-8", 0 ],
					"source" : [ "obj-3", 3 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 0 ],
					"source" : [ "obj-3", 4 ]
				}

			}
 ]
	}

}
